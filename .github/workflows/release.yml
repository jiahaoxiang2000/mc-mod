name: Create Release

on:
  push:
    tags:
      - "v*" # Triggers on version tags like v1.0.0, v1.1.0, etc.

jobs:
  build-and-release:
    name: Build and Create GitHub Release
    runs-on: ubuntu-latest

    permissions:
      contents: write # Needed to create releases and upload assets

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for changelog processing

      - name: Set up JDK 22
        uses: actions/setup-java@v4
        with:
          java-version: "22"
          distribution: "temurin"
          cache: gradle # Built-in Gradle caching

      - name: Validate Gradle wrapper
        uses: gradle/actions/wrapper-validation@v3

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: false
          gradle-home-cache-cleanup: true

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Extract version from tag
        id: get_version
        run: |
          # Remove 'v' prefix from tag to get version number
          VERSION=${GITHUB_REF_NAME#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$GITHUB_REF_NAME" >> $GITHUB_OUTPUT

      - name: Extract changelog for version
        id: changelog
        run: |
          # Extract changelog content for this version
          VERSION="${{ steps.get_version.outputs.version }}"

          # Create a temporary file to store the extracted changelog
          CHANGELOG_FILE="release_notes.md"

          # Extract content between [VERSION] and the next ## heading or ---
          # This finds the specific version section in the changelog
          awk -v version="$VERSION" '
            /^## \[/ {
              if (index($0, "[" version "]") > 0) {
                in_section = 1
                next
              } else if (in_section) {
                exit
              }
            }
            /^---$/ && in_section {
              exit
            }
            in_section && NF > 0 {
              print
            }
          ' CHANGELOG.md > "$CHANGELOG_FILE"

          # If changelog is empty, try to extract from Unreleased section as fallback
          if [ ! -s "$CHANGELOG_FILE" ]; then
            echo "Version-specific changelog not found, trying Unreleased section..."
            awk '
              /^## \[Unreleased\]/ {
                in_section = 1
                next
              }
              /^## / && in_section {
                exit
              }
              in_section && !/^---$/ && NF > 0 {
                print
              }
            ' CHANGELOG.md > "$CHANGELOG_FILE"
          fi

          # If still empty, provide a default message
          if [ ! -s "$CHANGELOG_FILE" ]; then
            echo "## Release $VERSION" > "$CHANGELOG_FILE"
            echo "" >> "$CHANGELOG_FILE"
            echo "Please see the full changelog for details." >> "$CHANGELOG_FILE"
          fi

          # Output the changelog path for use in release creation
          echo "changelog_file=$CHANGELOG_FILE" >> $GITHUB_OUTPUT

      - name: Build with Gradle
        run: ./gradlew build --parallel --build-cache --configuration-cache --no-daemon
        env:
          GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx4g -Dorg.gradle.workers.max=4"

      - name: Find built JAR file
        id: find_jar
        run: |
          # Find the main mod JAR (not sources or javadoc)
          JAR_FILE=$(find build/libs -name "*.jar" -not -name "*sources*" -not -name "*javadoc*" | head -1)

          if [ -z "$JAR_FILE" ]; then
            echo "No JAR file found in build/libs"
            exit 1
          fi

          echo "jar_file=$JAR_FILE" >> $GITHUB_OUTPUT
          echo "jar_name=$(basename $JAR_FILE)" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.tag_name }}
          name: "Isomo Mod ${{ steps.get_version.outputs.version }}"
          body_path: ${{ steps.changelog.outputs.changelog_file }}
          files: ${{ steps.find_jar.outputs.jar_file }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Build Artifacts (for debugging)
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            build/libs/*.jar
            ${{ steps.changelog.outputs.changelog_file }}
          retention-days: 7
